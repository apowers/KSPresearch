// Launch To Orbit
// "run launch."

// termital config
clearscreen.
set TERMINAL:WIDTH to 45.
set TERMINAL:HEIGHT to 20.

// Default orbital parameters
set MyOrbitAngle to 90.
set MyOrbitAltitude to 100000.
set MyNoAtmoOrbitAltitude to 45000.
set MyHeadingAltitude to 70000. // Set to the edge of space. 70km on Kerbin, 85km in JNSQ.
set SHIP:CONTROL:PILOTMAINTHROTTLE to 0. // Set throttle to 0 when control is returned to the pilot.
set MyThrottle to 1.
set MyHeading to UP.
set MyAscentProfile to "Gravity".

// Boosters haven't decoupled yet.
set ActiveBoosters to 1.

FUNCTION LaunchMenu {
  // Prompt for Orbit Altitude and Heading
  LOCAL LaunchGUI IS GUI(200).
  // Add widgets to the GUI
  LOCAL label IS LaunchGUI:ADDLABEL("Select Orbit Parameters").
  SET label:STYLE:ALIGN TO "CENTER".
  SET label:STYLE:HSTRETCH TO True. // Fill horizontally
  LOCAL altitudeBox to LaunchGUI:AddVBox.
  altitudeBox:ADDLABEL("Select Altitude:").
  if BODY:ATM:Exists = False {
    altitudeBox:AddRadioButton("25k", False). // launching from a planet with no atmosphere
    set MyNoAtmoOrbitAltitude to 25000.
  }
  altitudeBox:AddRadioButton("100k", True).
  altitudeBox:AddRadioButton("200k", False).
  altitudeBox:AddRadioButton("KEO", False).

  LOCAL angleBox to LaunchGUI:AddVBox.
  angleBox:ADDLABEL("Select Angle:").
  angleBox:AddRadioButton("45 - Inclined", False).
  angleBox:AddRadioButton("84 - Minmus", False).
  angleBox:AddRadioButton("90 - Equatorial", True).
  angleBox:AddRadioButton("180 - Polar", False).

  LOCAL ascentBox to LaunchGUI:AddVBox.
  ascentBox:ADDLABEL("Select Ascent Profile:").
  ascentBox:AddRadioButton("Staged", False).
  ascentBox:AddRadioButton("Gravity", True).
  ascentBox:AddRadioButton("HighDrag", False).

  LOCAL launch TO LaunchGUI:ADDBUTTON("Launch").
  LaunchGUI:SHOW().

  set altitudeBox:onRadioChange to { 
    parameter B.
    if B:text = "25k" {
      SET MyOrbitAltitude to MyNoAtmoOrbitAltitude.
      SET MyHeadingAltitude to MyNoAtmoOrbitAltitude.
    } else if B:text = "100k" {
      SET MyOrbitAltitude to 100000.
    } else if B:text = "200k" {
      SET MyOrbitAltitude to 200000.
    } else if B:text = "KEO" {
      SET MyOrbitAltitude to 2863330. //Stock
  //    SET MyOrbitAltitude to 8968110. //JNSQ
    } else {
      SET MyOrbitAltitude to 100000.
    }
  }.

  set angleBox:onRadioChange to { 
    parameter B.
    if B:text = "84 - Minmus" {
      SET MyOrbitAngle to 84.
    } else if B:text = "45 - Inclined" {
      SET MyOrbitAngle to 45.
    } else if B:text = "180 - Polar" {
      SET MyOrbitAngle to 180.
    } else {
      SET MyOrbitAngle to 90.
    }
  }.
  
  set ascentBox:onRadioChange to { 
    parameter B.
    set MyAscentProfile to B:text.
  }.

  LOCAL isDone IS FALSE.
  SET launch:ONCLICK TO { SET isDone to TRUE. }.
  wait until isDone.

  LaunchGUI:HIDE().
}

// Up First until boosters are expendend, then smooth heading changes.
FUNCTION StagedAscentProfile {
  wait until ActiveBoosters = 0.
  set StagedAscentTurnAlt to Altitude.
  print "Beginning Ascent Turn".
  until SHIP:APOAPSIS > MyOrbitAltitude {
    set MyHeading to HEADING( MyOrbitAngle,MAX((90 - ( 90 * ((ALTITUDE - StagedAscentTurnAlt) / (MyNoAtmoOrbitAltitude - StagedAscentTurnAlt)))),0)).
  }
}

// Smooth heading change all the way up.
FUNCTION GravityAscentProfile {
  print "Beginning Gravity Turn".
  until SHIP:APOAPSIS > MyOrbitAltitude {
    set MyHeading to HEADING( MyOrbitAngle,MAX((90 - ( 90 * (ALTITUDE / MyNoAtmoOrbitAltitude)^0.8)),0)).
  }
}

FUNCTION HighDragAscentProfile {
  print "Beginning Orbital Turn".
  until SHIP:APOAPSIS > MyOrbitAltitude {
    set MyHeading to HEADING( MyOrbitAngle,MAX((90 - ( 90 * (ALTITUDE / MyNoAtmoOrbitAltitude)^2)),0)).
  }
}

// From https://www.reddit.com/r/Kos/comments/5rp0w5/maneuver_nodes/
FUNCTION CREATE_CIRC_NODE {

	// create maneuver node to circularize orbit after initial ascent
	PARAMETER targetOrbit.
	
	// calculate surface gravity
	// SurfaceGravity = GravitationalConstant * MassOfBody / RadiusOfBody^2
	// (GravitationalConstant * MassOfBody) is also known as the Gravitational Parameter - available in kOS as BODY:MU
	LOCAL srfcGravity IS ( BODY:MU/BODY:RADIUS^2 ).

	// calculate orbital speed for desired orbit
	// OrbitalSpeed = RadiusOfBody x SQRT ( Surface Gravity / ( Radius Of Body + Desired Orbit) )
	LOCAL orbitalSpeed IS ( BODY:RADIUS * SQRT(srfcGravity/(BODY:RADIUS+targetOrbit)) ).

	// calculate speed at current apoapsis
	// SpeedAtApoapsis = SQRT ( GravitationalConstant * MassOfBody * ( 2/RadiusOfShipsOrbit - 1/SemiMajorAxisOfShipsOrbit ) )
	// (GravitationalConstant * MassOfBody) is also known as the Gravitational Parameter - available in kOS as BODY:MU
	LOCAL speedAtApo IS SQRT ( BODY:MU * ( 2/(BODY:RADIUS+SHIP:APOAPSIS) - 1/SHIP:ORBIT:SEMIMAJORAXIS ) ).

	// calculate deltaV required to circularize
	// {deltaV to Circularize} = {Orbital Speed of Desired Orbit} - {Speed at Apoapsis of Current Orbit}
	LOCAL dvCirc IS orbitalSpeed-speedAtApo.

	// create maneuver node to circularize orbit
	LOCAL circNode IS NODE ( TIME:SECONDS+ETA:APOAPSIS, 0, 0, dvCirc).
	ADD circNode.
	
	PRINT "Circularization maneuver node created.".
	RETURN circNode.
}

FUNCTION DeployFairing {
  for Fairing in SHIP:MODULESNAMED("ModuleProceduralFairing") {
    if Fairing:ALLEVENTNAMES:CONTAINS("deploy") {
      print "Deploying fairing.".
      Fairing:DOEVENT("Deploy").
    }
  }
  wait 5.
  print "Activating Lights and Group 10".
  set LIGHTS to True.
  set AG10 to True. 
}

// Prompt for launch configuration
LaunchMenu().

// Stage when any active engine has no fuel
// Sometimes the initial ascent is with boosters-only. When the main engine is off the ship thinks it has no thrust.
when true then {
  list ENGINES in Elist.
  for Engine in Elist {
    if Engine:FLAMEOUT {
      set ActiveBoosters to 0.
      stage.
      break.
    }
  }
  preserve.
}

// begin launch sequence
print "Launching to " + MyOrbitAltitude + "m at " + MyOrbitAngle + " deg. in T-minus".
from { local countdown is 3. } until countdown = 0 step {
  set countdown to countdown -1.
} do { 
  print "..." + countdown.
  wait 1.
}
print "ENGAGE!".
lock THROTTLE to MyThrottle.
lock STEERING to MyHeading.
stage.

if MyAscentProfile = "Staged" {
  StagedAscentProfile().
} else if MyAscentProfile = "HighDrag" {
  HighDragAscentProfile().
} else if MyAscentProfile = "Gravity" {
  GravityAscentProfile().
}

print "Standing by for orbital maneuver".
set MyThrottle to 0.
set WARP to 3.
wait until SHIP:ALTITUDE > MyHeadingAltitude.

DeployFairing().

// Create a maneuver node to circularize at Apoapsis
set circNode to CREATE_CIRC_NODE(SHIP:Apoapsis).

// NOTE: Orbital insertion is complicated because we may need to stage in the middle of it.
// Mass, Thrust, and everything else change dramatically after staging.

// Approximate Maneuver Node burn time.
set MyMaxAcceleration to (SHIP:MaxThrust / SHIP:Mass).
set MyBurnTime to (circNode:DeltaV:MAG / MyMaxAcceleration).

// Start burn at half the burn time before the node.
wait until circNode:ETA < (MyBurnTime / 2).
set WARP to 0.
print "Beginning Orbital Insertion".

// Lock steering to the node and follow that until only a little dV remains.
until circNode:DeltaV:MAG < 200 {
  set MyHeading to circNode:DeltaV.
  // Keep acceleration constant as mass changes.
  set MyThrottle to (MyMaxAcceleration * SHIP:Mass / SHIP:MAXTHRUST).
}
remove circNode.

// Head to the horizon (+/- 15deg) and burn until nearly circular.
// * Periapsis is 98% of our current Altitude (because it can't go higher)
// * Periapsis is 98% of Apoapsis (basically circular)
until SHIP:Periapsis > SHIP:Altitude * 0.98 or SHIP:Periapsis/SHIP:Apoapsis > 0.98 {
  set MyHeadingAngle to MAX(MIN(-VERTICALSPEED,15),-15).
  set MyHeading to HEADING(MyOrbitAngle,MyHeadingAngle).
  set MyThrottle to (MyMaxAcceleration * SHIP:Mass / SHIP:MAXTHRUST).
}

// throttle to zero before releasing control
set MyThrottle to 0.
set SHIP:CONTROL:PILOTMAINTHROTTLE to 0.

print "Orbit Achieved".
